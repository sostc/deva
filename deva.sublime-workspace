{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ti",
				"timer"
			],
			[
				"c",
				"create_cps\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/spark/pycharmproject/secsay/zhouyi_api.py",
			"settings":
			{
				"buffer_size": 4110,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "deva/store.py",
			"settings":
			{
				"buffer_size": 5932,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "deva/utils/sqlitedict.py",
			"settings":
			{
				"buffer_size": 21658,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/Users/spark/pycharmproject/secsay/j4096.py",
			"settings":
			{
				"buffer_size": 495049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAABK9AQAAAAAAEr0BAAAAAAADAAAA56m6",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE70BAAAAAAATvQEAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "kongzhi"
					},
					"BwAAABK9AQAAAAAAE70BAAAAAAAAAAAAE70BAAAAAAAUvQEAAAAAAAAAAAAUvQEAAAAAABW9AQAAAAAAAAAAABW9AQAAAAAAFr0BAAAAAAAAAAAAFr0BAAAAAAAXvQEAAAAAAAAAAAAXvQEAAAAAABi9AQAAAAAAAAAAABi9AQAAAAAAGb0BAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEr0BAAAAAAASvQEAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					7,
					"left_delete",
					null,
					"BwAAABi9AQAAAAAAGL0BAAAAAAABAAAAaRe9AQAAAAAAF70BAAAAAAABAAAAaBa9AQAAAAAAFr0BAAAAAAABAAAAehW9AQAAAAAAFb0BAAAAAAABAAAAZxS9AQAAAAAAFL0BAAAAAAABAAAAbhO9AQAAAAAAE70BAAAAAAABAAAAbxK9AQAAAAAAEr0BAAAAAAABAAAAaw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGb0BAAAAAAAZvQEAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAE70BAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEr0BAAAAAAASvQEAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAFL0BAAAAAAABAAAAaw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE70BAAAAAAATvQEAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAFb0BAAAAAAACAAAAa28",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFL0BAAAAAAAUvQEAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAFr0BAAAAAAADAAAAa29u",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFb0BAAAAAAAVvQEAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAGL0BAAAAAAAEAAAAa29uZw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFr0BAAAAAAAWvQEAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAGb0BAAAAAAAGAAAAa29uZyB6",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGL0BAAAAAAAYvQEAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAGr0BAAAAAAAHAAAAa29uZyB6aA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGb0BAAAAAAAZvQEAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"",
					null,
					"AQAAABK9AQAAAAAAEr0BAAAAAAAIAAAAa29uZyB6aGk",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGr0BAAAAAAAavQEAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "控制"
					},
					"AgAAABK9AQAAAAAAE70BAAAAAAAAAAAAE70BAAAAAAAUvQEAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEr0BAAAAAAASvQEAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAABO9AQAAAAAAE70BAAAAAAADAAAA5Yi2",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFL0BAAAAAAAUvQEAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "deva/endpoints.py",
			"settings":
			{
				"buffer_size": 10271,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/Python 3/Python3.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python 3/Python3.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sspy3",
				"Set Syntax: Python3"
			],
			[
				"sspy",
				"Set Syntax: Python"
			],
			[
				"in",
				"Interrupt IPython Notebook Kernel"
			],
			[
				"pyth",
				"Set Syntax: Python3"
			],
			[
				"py",
				"Package Control: Add Repository"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/spark/pycharmproject/deva",
		"/Users/spark/pycharmproject/deva/deva",
		"/Users/spark/pycharmproject/naja",
		"/Users/spark/pycharmproject/naja/twitter"
	],
	"file_history":
	[
		"/Users/spark/pycharmproject/deva/deva/compute.py",
		"/Users/spark/pycharmproject/deva/requirements.txt",
		"/Users/spark/pycharmproject/deva/deva/core.py",
		"/Users/spark/pycharmproject/deva/deva/topic.py",
		"/usr/local/lib/python3.10/site-packages/aioredis/__init__.py",
		"/Users/spark/pycharmproject/secsay/g64.py",
		"/Users/spark/pycharmproject/secsay/dayou.py",
		"/Users/spark/pycharmproject/deva/deva/pipe.py",
		"/Users/spark/pycharmproject/naja/twitter/trump.py",
		"/Users/spark/pycharmproject/naja/twitter/twitter.py",
		"/Users/spark/pycharmproject/deva/deva/__init__.py",
		"/Users/spark/pycharmproject/deva/deva/page.py",
		"/Users/spark/pship/down_m3u8/index-f1-v1-a1.m3u8",
		"/Users/spark/.vim/bundle/vim-gsc/plugin/gsc.vim",
		"/Users/spark/pycharmproject/deva/deva/when.py",
		"/Users/spark/.vimrc",
		"/Users/spark/pycharmproject/deva/deva/stream.py",
		"/Users/spark/pycharmproject/deva/.git/config",
		"/Users/spark/pycharmproject/deva/.gitignore",
		"/Users/spark/pycharmproject/easyquant/.gitignore",
		"/private/etc/hosts",
		"/Users/spark/pycharmproject/easyquant/stock_2468/model.py",
		"/Users/spark/pship/snipte_test.py",
		"/Users/spark/pycharmproject/easyquant/stream_web_server.py",
		"/Users/spark/pycharmproject/easyquant/stock_2468/main.py",
		"/Users/spark/pycharmproject/deva/deva/streamz/core.py",
		"/Users/spark/pycharmproject/deva/deva/streamz/sources.py",
		"/usr/local/lib/python3.7/site-packages/tornado/process.py",
		"/Users/spark/Downloads/streamz-0.5.1/MANIFEST.in",
		"/Users/spark/Downloads/streamz-0.5.1/setup.cfg",
		"/Users/spark/pycharmproject/deva/setup.py",
		"/Users/spark/Downloads/streamz-0.5.1/requirements.txt",
		"/Users/spark/pycharmproject/deva/deva/search.py",
		"/Users/spark/pship/tmp.txt"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Thread",
			"cache",
			"_rule_re",
			"is_werkzeug_route",
			"_rule_re",
			"timer",
			"islice",
			"head",
			"detail",
			"SyntasticStatuslineFlag",
			"tagbar",
			"核桃",
			"大畜",
			"pay",
			"九四"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/spark/pycharmproject/deva"
		},
		{
			"path": "/Users/spark/pycharmproject/secsay"
		},
		{
			"path": "/Users/spark/pycharmproject/naja"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/spark/pycharmproject/secsay/zhouyi_api.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4110,
						"regions":
						{
						},
						"selection":
						[
							[
								737,
								737
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "deva/store.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5932,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "deva/utils/sqlitedict.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21658,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/spark/pycharmproject/secsay/j4096.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 495049,
						"regions":
						{
						},
						"selection":
						[
							[
								114334,
								114334
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "deva/endpoints.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10271,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.autopep8":
	{
		"height": 108.0
	},
	"output.exec":
	{
		"height": 108.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"stre",
				"deva/stream.py"
			],
			[
				"str",
				"deva/stream.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/pycharmproject/deva/deva.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
