{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sta",
				"started"
			],
			[
				"stat",
				"state"
			],
			[
				"_s",
				"_scheduler"
			],
			[
				"ti",
				"timer"
			],
			[
				"c",
				"create_cps\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"file": "deva/when.py",
			"settings":
			{
				"buffer_size": 7659,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					99,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAGkNAAAAAAAAaw0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkNAAAAAAAAaQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAANsMAAAAAAAA3AwAAAAAAAAAAAAA3AwAAAAAAADkDAAAAAAAAAAAAADkDAAAAAAAAOUMAAAAAAAAAAAAAOUMAAAAAAAA5gwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsMAAAAAAAA2wwAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYMAAAAAAAA5wwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYMAAAAAAAA5gwAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAOcMAAAAAAAA6QwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcMAAAAAAAA5wwAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAAOgMAAAAAAAA6QwAAAAAAAAAAAAA6QwAAAAAAADqDAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgMAAAAAAAA6AwAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOoMAAAAAAAA6wwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoMAAAAAAAA6gwAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					3,
					"left_delete",
					null,
					"AwAAAOoMAAAAAAAA6gwAAAAAAAABAAAAaekMAAAAAAAA6QwAAAAAAAABAAAAcugMAAAAAAAA6AwAAAAAAAABAAAAdA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsMAAAAAAAA6wwAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAOgMAAAAAAAA7wwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgMAAAAAAAA6AwAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAPAMAAAAAAAA8QwAAAAAAAAAAAAA8QwAAAAAAADyDAAAAAAAAAAAAADyDAAAAAAAAPMMAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAMAAAAAAAA8AwAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": " kw"
					},
					"AwAAAPMMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD1DAAAAAAAAAAAAAD1DAAAAAAAAPYMAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMMAAAAAAAA8wwAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"insert_completion",
					{
						"completion": "kwargs",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "kwargs"
					},
					"AgAAAPQMAAAAAAAA9AwAAAAAAAACAAAAa3f0DAAAAAAAAPoMAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYMAAAAAAAA9gwAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoMAAAAAAAA+gwAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPsMAAAAAAAA/AwAAAAAAAAAAAAA/AwAAAAAAAAEDQAAAAAAAAAAAAAEDQAAAAAAAAgNAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsMAAAAAAAA+wwAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAAAgNAAAAAAAACQ0AAAAAAAAAAAAACQ0AAAAAAAAKDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgNAAAAAAAACA0AAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "igg"
					},
					"AwAAAAoNAAAAAAAACw0AAAAAAAAAAAAACw0AAAAAAAAMDQAAAAAAAAAAAAAMDQAAAAAAAA0NAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoNAAAAAAAACg0AAAAAAAAAAAAAAADwvw"
				],
				[
					126,
					5,
					"left_delete",
					null,
					"BQAAAAwNAAAAAAAADA0AAAAAAAABAAAAZwsNAAAAAAAACw0AAAAAAAABAAAAZwoNAAAAAAAACg0AAAAAAAABAAAAaQkNAAAAAAAACQ0AAAAAAAABAAAAcggNAAAAAAAACA0AAAAAAAABAAAAdA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0NAAAAAAAADQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"paste",
					null,
					"AQAAAAgNAAAAAAAADw0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgNAAAAAAAACA0AAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA8NAAAAAAAAEA0AAAAAAAAAAAAAEA0AAAAAAAARDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8NAAAAAAAADw0AAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABENAAAAAAAAEg0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABENAAAAAAAAEQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABINAAAAAAAAFA0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABINAAAAAAAAEg0AAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAABMNAAAAAAAAFA0AAAAAAAAAAAAAFA0AAAAAAAAVDQAAAAAAAAAAAAAVDQAAAAAAABYNAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMNAAAAAAAAEw0AAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert_completion",
					{
						"completion": "interval",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "interval"
					},
					"AgAAABMNAAAAAAAAEw0AAAAAAAADAAAAaW50Ew0AAAAAAAAbDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYNAAAAAAAAFg0AAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "note"
					},
					"BAAAAPEMAAAAAAAA8gwAAAAAAAAAAAAA8gwAAAAAAADzDAAAAAAAAAAAAADzDAAAAAAAAPQMAAAAAAAAAAAAAPQMAAAAAAAA9QwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEMAAAAAAAA8QwAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					1,
					"left_delete",
					null,
					"AQAAAPQMAAAAAAAA9AwAAAAAAAABAAAAZQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUMAAAAAAAA9QwAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPQMAAAAAAAA9QwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQMAAAAAAAA9AwAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAK4NAAAAAAAArg0AAAAAAAACAAAAIyA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkNAAAAAAAAuQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"left_delete",
					null,
					"AQAAALcNAAAAAAAAtw0AAAAAAAAIAAAAaW50ZXJ2YWw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcNAAAAAAAAvw0AAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"left_delete",
					null,
					"AQAAAKINAAAAAAAAog0AAAAAAAAYAAAAICAgICAgICAgICAgdHJpZ2dlcj0nJywK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKINAAAAAAAAug0AAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACANAAAAAAAAIQ0AAAAAAAAAAAAAIQ0AAAAAAAAtDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACANAAAAAAAAIA0AAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"paste",
					null,
					"AQAAAC0NAAAAAAAAMw0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0NAAAAAAAALQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADMNAAAAAAAANQ0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMNAAAAAAAAMw0AAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADQNAAAAAAAANg0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQNAAAAAAAANA0AAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAADUNAAAAAAAANg0AAAAAAAAAAAAANg0AAAAAAAA3DQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUNAAAAAAAANQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert_completion",
					{
						"completion": "trigger",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "trigger"
					},
					"AgAAADUNAAAAAAAANQ0AAAAAAAACAAAAdHI1DQAAAAAAADwNAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcNAAAAAAAANw0AAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAD4NAAAAAAAAPw0AAAAAAAAAAAAAPw0AAAAAAABADQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4NAAAAAAAAPg0AAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEANAAAAAAAAQQ0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEANAAAAAAAAQA0AAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEENAAAAAAAAQw0AAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEENAAAAAAAAQQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAEINAAAAAAAAQw0AAAAAAAAAAAAAQw0AAAAAAABEDQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEINAAAAAAAAQg0AAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert_completion",
					{
						"completion": "interval",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "interval"
					},
					"AgAAAEINAAAAAAAAQg0AAAAAAAACAAAAaW5CDQAAAAAAAEoNAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQNAAAAAAAARA0AAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AQAAAAANAAAAAAAAAA0AAAAAAAAhAAAAICAgICAgICAgICAgdHJpZ2dlciA9ICdpbnRlcnZhbCcK",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAANAAAAAAAAIQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACoNAAAAAAAAKw0AAAAAAAAAAAAAKw0AAAAAAAA3DQAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACoNAAAAAAAAKg0AAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 7714,
						"text": "import os\nimport atexit\nfrom .bus import log\nfrom .core import Stream\nfrom .utils.time import convert_interval\nimport datetime\nfrom tornado import gen\nimport time\n\n\n\"\"\"定时任务和事件调度模块\n\n本模块提供了定时任务调度和事件处理的功能。主要包含:\n\n- exit(): 进程退出时发送信号\n- scheduler: 定时任务调度流\n\n示例\n-------\n# 基本使用\n>>> from deva import when\n\n# 退出事件处理\n>>> when('exit').then(lambda: print('bye'))  # 进程退出时打印\n\n# 创建调度器\n>>> s = scheduler()  # 创建调度器实例\n\n# 定时任务示例\n# 1. 间隔执行\n>>> scheduler().add_job(lambda: print('hello'), seconds=5)  # 每5秒打印一次\n>>> s.add_job(lambda: print('每分钟执行'), minutes=1)  # 每分钟执行一次\n\n# 2. 定时执行\n>>> s.add_job(lambda: print('每天9点执行'), trigger='cron', hour=9)  # 每天9点执行\n\n# 3. 延迟执行\n>>> s.add_job(lambda: print('5秒后执行一次'), run_date=datetime.datetime.now() + datetime.timedelta(seconds=5))  # 延迟5秒执行一次\n\n# 任务管理\n>>> s.get_jobs()  # 获取所有已添加的任务\n>>> s.remove_job('job_1')  # 移除指定任务\n\n参见\n--------\ndeva.core.Stream : 基础流处理类\ndeva.bus : 消息总线模块\n\"\"\"\n\n\n@atexit.register\ndef exit():\n    \"\"\"进程退出时发信号到log.\n\n    Examples:\n    ----------\n    when('exit',source=log).then(lambda :print('bye bye'))\n    \"\"\"\n    #\n\n    return 'exit' >> log\n\n\n@Stream.register_api(staticmethod)\nclass scheduler(Stream):\n    \"\"\"定时流.\n\n    一个基于apscheduler的定时任务调度器,可以按照固定时间间隔执行任务并将结果放入流中。\n\n    示例:\n    -------\n    s = scheduler()  # 创建调度器\n    s.add_job(name='hello',seconds=5,start_date='2019-04-03 09:25:00')  # 添加任务\n    s.get_jobs()>>pmap(lambda x:x.next_run_time)>>to_list  # 获取所有任务的下次执行时间\n\n    con = s.map(lambda x:\n       match(x,\n            'open',lambda x:x>>warn,\n             'hello',lambda x:x>>warn,\n             ANY,'None',\n            ))\n\n    s.add_job(func=lambda :print('yahoo'),seconds=5)  # 添加简单的打印任务\n\n    参数:\n    -------\n    weeks (int): 等待的周数\n    days (int): 等待的天数  \n    hours (int): 等待的小时数\n    minutes (int): 等待的分钟数\n    seconds (int): 等待的秒数\n    start_date (datetime|str): 任务开始时间\n    end_date (datetime|str): 任务结束时间\n    timezone (datetime.tzinfo|str): 时区设置\n    jitter (int|None): 任务执行时间的随机偏移量(秒)\n    \"\"\"\n\n    def __init__(self, start=True, **kwargs):\n        \"\"\"初始化调度器\n\n        Args:\n            start (bool): 是否立即启动调度器\n            **kwargs: 其他参数\n        \"\"\"\n        from apscheduler.schedulers.tornado import TornadoScheduler\n        from apscheduler.executors.pool import ThreadPoolExecutor\n        import pytz\n\n        self._scheduler = TornadoScheduler(\n            timezone=pytz.timezone('Asia/Shanghai'),\n            executors={'default': ThreadPoolExecutor(20)},\n            job_defaults={\n                'coalesce': False,\n                'max_instances': 1  # 相同job重复执行与否的判断，相同job最多同时多少个实例\n            }\n        )\n        super(scheduler, self).__init__(ensure_io_loop=True, **kwargs)\n        self.stopped = True\n        if start:\n            self.start()\n\n    def start(self):\n        \"\"\"启动调度器\"\"\"\n        if self.stopped:\n            self.stopped = False\n        self._scheduler.start()\n\n    def stop(self):\n        \"\"\"停止调度器\"\"\"\n        self._scheduler.shutdown()\n        self.stopped = True\n\n    def add_job(self, func, name=None, **kwargs):\n        \"\"\"添加定时任务\n\n        Args:\n            func: 要执行的函数\n            name: 任务名称,也作为任务ID\n            **kwargs: 其他调度参数\n\n        Returns:\n            Job: 添加的任务对象\n\n        示例:\n            i.add_job(name='hello',func = lambda x:'heoo',\n            seconds=5,start_date='2019-04-03 09:25:00')\n        \"\"\"\n        if 'trigger' not in kwargs:\n            kwargs['trigger'] = 'interval'\n\n        return self._scheduler.add_job(\n            func=lambda: self._emit(func()),\n            name=name,\n            id=name,\n            **kwargs)\n\n    def emit(self, x, asynchronous=None):\n        \"\"\"发送数据到流中\n\n        Args:\n            x: 要发送的数据\n            asynchronous: 是否异步执行\n\n        Returns:\n            Job: 添加的任务对象\n        \"\"\"\n        return self.add_job(**x)\n\n    def remove_job(self, name):\n        \"\"\"移除指定名称的任务\n\n        Args:\n            name: 要移除的任务名称\n\n        Returns:\n            bool: 是否成功移除\n        \"\"\"\n        return self._scheduler.remove_job(job_id=name)\n\n    def get_jobs(self,):\n        \"\"\"获取所有任务列表\n\n        Returns:\n            list: 所有任务对象列表\n        \"\"\"\n        return self._scheduler.get_jobs()\n\n\n@Stream.register_api(staticmethod)\nclass timer(Stream):\n    \"\"\"按照时间间隔执行函数并将返回值放入流.\n\n    定时器类,按照指定的时间间隔重复执行函数,并将函数返回值发送到数据流中。\n\n    参数:\n        interval (int/float): 执行时间间隔,单位为秒,默认1秒\n        ttl (int/float): 定时器生命周期,超过后自动停止,默认None表示永不停止\n        start (bool): 是否在创建后立即启动,默认False\n        func (callable): 要执行的函数,默认返回当前秒数\n        thread (bool): 是否在线程池中执行函数,默认False\n        threadcount (int): 线程池大小,默认5个线程\n        ensure_io_loop (bool): 是否确保IO循环存在,默认True\n        **kwargs: 传递给父类的额外参数\n\n    示例:\n        # 每秒打印当前时间\n        timer(interval=1, func=lambda: datetime.now(), start=True)\n\n        # 在线程池中每5秒执行一次耗时操作\n        timer(interval=5, func=heavy_task, thread=True, threadcount=3)\n    \"\"\"\n\n    def __init__(self,\n                 interval=1,\n                 ttl=None,\n                 start=False,\n                 func=lambda: datetime.datetime.now().second,\n                 thread=False,\n                 threadcount=5,\n                 ensure_io_loop=True,\n                 **kwargs):\n\n        self.interval = convert_interval(interval)  # 转换并存储时间间隔\n        self.func = func  # 存储要执行的函数\n        self.ttl = convert_interval(ttl) if ttl else None  # 转换并存储生命周期\n        self.thread = thread\n        if self.thread:  # 如果使用线程池则创建线程池\n            from concurrent.futures import ThreadPoolExecutor\n            self.thread_pool = ThreadPoolExecutor(threadcount)\n\n        super(timer, self).__init__(ensure_io_loop=ensure_io_loop, **kwargs)\n        self.stopped = True  # 初始状态为停止\n        if start:  # 如果需要自动启动则调用start()\n            self.start()\n\n    @gen.coroutine\n    def run(self):\n        \"\"\"定时器主循环,负责按照间隔执行函数\"\"\"\n        while True:\n            # 检查是否超过生命周期\n            if self.ttl and time.time() - self._start_time > self.ttl:\n                self.stop()\n\n            # 根据配置选择在线程池或主线程中执行函数\n            if self.thread:\n                self.thread_pool.submit(lambda: self.emit(self.func()))\n            else:\n                self.emit(self.func())\n            yield gen.sleep(self.interval)  # 等待到下一次执行时间\n            if self.stopped:  # 如果已停止则退出循环\n                break\n\n    def start(self):\n        \"\"\"启动定时器\"\"\"\n        self._start_time = time.time()  # 记录启动时间\n        if self.stopped:\n            self.stopped = False\n            self.loop.add_callback(self.run)  # 将主循环加入事件循环\n\n    def stop(self):\n        \"\"\"停止定时器\"\"\"\n        self.stopped = True\n\n\nclass when(object):\n    \"\"\"当某个事件发生时执行指定操作的类\n\n    该类用于监听数据流中的事件,当满足条件时执行相应的回调函数。\n    可以通过字符串匹配或自定义函数来定义触发条件。\n\n    参数:\n    -------\n    occasion : str或callable\n        触发条件,可以是字符串或函数:\n        - 字符串: 当数据流中的值包含该字符串时触发\n        - 函数: 接收数据流中的值作为输入,返回布尔值表示是否触发\n    source : Stream, 可选\n        数据源流,默认为全局日志流log\n\n    示例:\n    -------\n    # 字符串匹配方式\n    when('open').then(lambda :print('开盘啦'))\n\n    # 函数判断方式 \n    when(lambda x:x>2).then(lambda x:print(x,'x大于二'))\n    \"\"\"\n\n    def __init__(self, occasion, source=log):\n        self.occasion = occasion  # 存储触发条件\n        self.source = source  # 存储数据源流\n\n    def then(self, func, *args, **kwargs):\n        \"\"\"设置触发时要执行的回调函数\n\n        参数:\n        -------\n        func : callable\n            要执行的回调函数\n        *args, **kwargs : \n            传递给回调函数的额外参数\n\n        返回:\n        -------\n        Sink\n            返回sink对象,用于接收数据流\n        \"\"\"\n        if callable(self.occasion):  # 如果是函数条件,传入数据值作为参数\n            return self.source.filter(self.occasion).sink(\n                lambda x: func(x, *args, **kwargs))\n        else:  # 如果是字符串条件,只执行回调不传参\n            return self.source.filter(lambda x: self.occasion in str(x)).sink(\n                lambda x: func(*args, **kwargs))\n\n\nwhen('exit', source=log).then(lambda: print('bye bye,', os.getpid()))\n"
					},
					"",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4NAAAAAAAAzg0AAAAAAAAAAAAAAADwvw"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAKgBAAAAAAAAqQEAAAAAAAAAAAAAqQEAAAAAAACpAQAAAAAAAAsAAABzY2hlZHVsZXIoKQ",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMBAAAAAAAAqAEAAAAAAAAAAAAAAADwvw"
				],
				[
					264,
					4,
					"left_delete",
					null,
					"BAAAAFkKAAAAAAAAWQoAAAAAAAABAAAAZVgKAAAAAAAAWAoAAAAAAAABAAAAdVcKAAAAAAAAVwoAAAAAAAABAAAAclYKAAAAAAAAVgoAAAAAAAABAAAAVA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoKAAAAAAAAWgoAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAAFYKAAAAAAAAVwoAAAAAAAAAAAAAVwoAAAAAAABYCgAAAAAAAAAAAABYCgAAAAAAAFkKAAAAAAAAAAAAAFkKAAAAAAAAWgoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYKAAAAAAAAVgoAAAAAAAAAAAAAAADwvw"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "._"
					},
					"AgAAAFoKAAAAAAAAWwoAAAAAAAAAAAAAWwoAAAAAAABcCgAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoKAAAAAAAAWgoAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFwKAAAAAAAAXQoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwKAAAAAAAAXAoAAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"insert_completion",
					{
						"completion": "_scheduler",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_scheduler"
					},
					"AgAAAFsKAAAAAAAAWwoAAAAAAAACAAAAX3NbCgAAAAAAAGUKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0KAAAAAAAAXQoAAAAAAAAAAAAAAADwvw"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": ".sta"
					},
					"BAAAAGUKAAAAAAAAZgoAAAAAAAAAAAAAZgoAAAAAAABnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUKAAAAAAAAZQoAAAAAAAAAAAAAAADwvw"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGkKAAAAAAAAagoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkKAAAAAAAAaQoAAAAAAAAAAAAAAADwvw"
				],
				[
					275,
					1,
					"insert_completion",
					{
						"completion": "state",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "state"
					},
					"AgAAAGYKAAAAAAAAZgoAAAAAAAAEAAAAc3RhdGYKAAAAAAAAawoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoKAAAAAAAAagoAAAAAAAAAAAAAAADwvw"
				],
				[
					285,
					3,
					"left_delete",
					null,
					"AwAAAFAKAAAAAAAAUAoAAAAAAAABAAAAcE8KAAAAAAAATwoAAAAAAAABAAAAcE4KAAAAAAAATgoAAAAAAAABAAAAbw",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEKAAAAAAAAUQoAAAAAAAAAAAAAAADwvw"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "art"
					},
					"AwAAAE4KAAAAAAAATwoAAAAAAAAAAAAATwoAAAAAAABQCgAAAAAAAAAAAABQCgAAAAAAAFEKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4KAAAAAAAATgoAAAAAAAAAAAAAAADwvw"
				],
				[
					297,
					1,
					"paste",
					null,
					"AgAAANEKAAAAAAAA2AoAAAAAAAAAAAAA2AoAAAAAAADYCgAAAAAAAAcAAABzdG9wcGVk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEKAAAAAAAA2AoAAAAAAAAAAAAAAADwvw"
				],
				[
					303,
					1,
					"paste",
					null,
					"AgAAAOsKAAAAAAAA8goAAAAAAAAAAAAA8goAAAAAAADyCgAAAAAAAAcAAABzdG9wcGVk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsKAAAAAAAA8goAAAAAAAAAAAAAAADwvw"
				],
				[
					313,
					1,
					"paste",
					null,
					"AgAAAHQLAAAAAAAAewsAAAAAAAAAAAAAewsAAAAAAAB7CwAAAAAAAAcAAABzdG9wcGVk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQLAAAAAAAAewsAAAAAAAAAAAAAAADwvw"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "True"
					},
					"BQAAAPUKAAAAAAAA9goAAAAAAAAAAAAA9goAAAAAAAD2CgAAAAAAAAUAAABGYWxzZfYKAAAAAAAA9woAAAAAAAAAAAAA9woAAAAAAAD4CgAAAAAAAAAAAAD4CgAAAAAAAPkKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUKAAAAAAAA+goAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "False"
					},
					"BgAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB+CwAAAAAAAAQAAABUcnVlfgsAAAAAAAB/CwAAAAAAAAAAAAB/CwAAAAAAAIALAAAAAAAAAAAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACCCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0LAAAAAAAAgQsAAAAAAAAAAAAAAADwvw"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "not"
					},
					"AwAAAMwKAAAAAAAAzQoAAAAAAAAAAAAAzQoAAAAAAADOCgAAAAAAAAAAAADOCgAAAAAAAM8KAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwKAAAAAAAAzAoAAAAAAAAAAAAAAADwvw"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8KAAAAAAAA0AoAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8KAAAAAAAAzwoAAAAAAAAAAAAAAADwvw"
				],
				[
					353,
					1,
					"cut",
					null,
					"AQAAAAYLAAAAAAAABgsAAAAAAAAXAAAAc2VsZi5fc2NoZWR1bGVyLnN0YXJ0KCk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0LAAAAAAAABgsAAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAN0KAAAAAAAA3goAAAAAAAAAAAAA3goAAAAAAADmCgAAAAAAAAAAAADmCgAAAAAAAOoKAAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0KAAAAAAAA3QoAAAAAAAAAAAAAAADwvw"
				],
				[
					357,
					1,
					"paste",
					null,
					"AQAAAOoKAAAAAAAAAQsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoKAAAAAAAA6goAAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"left_delete",
					null,
					"AQAAAAILAAAAAAAAAgsAAAAAAAAgAAAAICAgICAgICAgICAgc2VsZi5zdGFydGVkID0gVHJ1ZQo",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAILAAAAAAAAIgsAAAAAAAAAAAAAAADwvw"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAADwLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA+CwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwLAAAAAAAAPAsAAAAAAAAAAAAAAADwvw"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " self.st"
					},
					"CAAAAD4LAAAAAAAAPwsAAAAAAAAAAAAAPwsAAAAAAABACwAAAAAAAAAAAABACwAAAAAAAEELAAAAAAAAAAAAAEELAAAAAAAAQgsAAAAAAAAAAAAAQgsAAAAAAABDCwAAAAAAAAAAAABDCwAAAAAAAEQLAAAAAAAAAAAAAEQLAAAAAAAARQsAAAAAAAAAAAAARQsAAAAAAABGCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4LAAAAAAAAPgsAAAAAAAAAAAAAAADwvw"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAEYLAAAAAAAARwsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYLAAAAAAAARgsAAAAAAAAAAAAAAADwvw"
				],
				[
					376,
					1,
					"insert_completion",
					{
						"completion": "started",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "started"
					},
					"AgAAAEQLAAAAAAAARAsAAAAAAAADAAAAc3RhRAsAAAAAAABLCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcLAAAAAAAARwsAAAAAAAAAAAAAAADwvw"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEsLAAAAAAAATAsAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsLAAAAAAAASwsAAAAAAAAAAAAAAADwvw"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAEwLAAAAAAAATQsAAAAAAAAAAAAATQsAAAAAAABVCwAAAAAAAAAAAABNCwAAAAAAAE0LAAAAAAAACAAAACAgICAgICAgTQsAAAAAAABZCwAAAAAAAAAAAAA",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwLAAAAAAAATAsAAAAAAAAAAAAAAADwvw"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAHwLAAAAAAAAfAsAAAAAAAAUAAAAc2VsZi5zdGFydGVkID0gRmFsc2U",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJALAAAAAAAAfAsAAAAAAAAAAAAAAADwvw"
				],
				[
					386,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 7703,
						"text": "import os\nimport atexit\nfrom .bus import log\nfrom .core import Stream\nfrom .utils.time import convert_interval\nimport datetime\nfrom tornado import gen\nimport time\n\n\n\"\"\"定时任务和事件调度模块\n\n本模块提供了定时任务调度和事件处理的功能。主要包含:\n\n- exit(): 进程退出时发送信号\n- scheduler: 定时任务调度流\n\n示例\n-------\n# 基本使用\n>>> from deva import when\n\n# 退出事件处理\n>>> when('exit').then(lambda: print('bye'))  # 进程退出时打印\n\n# 创建调度器\n>>> s = scheduler()  # 创建调度器实例\n\n# 定时任务示例\n# 1. 间隔执行\n>>> s.add_job(lambda: print('hello'), seconds=5)  # 每5秒打印一次\n>>> s.add_job(lambda: print('每分钟执行'), minutes=1)  # 每分钟执行一次\n\n# 2. 定时执行\n>>> s.add_job(lambda: print('每天9点执行'), trigger='cron', hour=9)  # 每天9点执行\n\n# 3. 延迟执行\n>>> s.add_job(lambda: print('5秒后执行一次'), run_date=datetime.datetime.now() + datetime.timedelta(seconds=5))  # 延迟5秒执行一次\n\n# 任务管理\n>>> s.get_jobs()  # 获取所有已添加的任务\n>>> s.remove_job('job_1')  # 移除指定任务\n\n参见\n--------\ndeva.core.Stream : 基础流处理类\ndeva.bus : 消息总线模块\n\"\"\"\n\n\n@atexit.register\ndef exit():\n    \"\"\"进程退出时发信号到log.\n\n    Examples:\n    ----------\n    when('exit',source=log).then(lambda :print('bye bye'))\n    \"\"\"\n    #\n\n    return 'exit' >> log\n\n\n@Stream.register_api(staticmethod)\nclass scheduler(Stream):\n    \"\"\"定时流.\n\n    一个基于apscheduler的定时任务调度器,可以按照固定时间间隔执行任务并将结果放入流中。\n\n    示例:\n    -------\n    s = scheduler()  # 创建调度器\n    s.add_job(name='hello',seconds=5,start_date='2019-04-03 09:25:00')  # 添加任务\n    s.get_jobs()>>pmap(lambda x:x.next_run_time)>>to_list  # 获取所有任务的下次执行时间\n\n    con = s.map(lambda x:\n       match(x,\n            'open',lambda x:x>>warn,\n             'hello',lambda x:x>>warn,\n             ANY,'None',\n            ))\n\n    s.add_job(func=lambda :print('yahoo'),seconds=5)  # 添加简单的打印任务\n\n    参数:\n    -------\n    weeks (int): 等待的周数\n    days (int): 等待的天数  \n    hours (int): 等待的小时数\n    minutes (int): 等待的分钟数\n    seconds (int): 等待的秒数\n    start_date (datetime|str): 任务开始时间\n    end_date (datetime|str): 任务结束时间\n    timezone (datetime.tzinfo|str): 时区设置\n    jitter (int|None): 任务执行时间的随机偏移量(秒)\n    \"\"\"\n\n    def __init__(self, start=True, **kwargs):\n        \"\"\"初始化调度器\n\n        Args:\n            start (bool): 是否立即启动调度器\n            **kwargs: 其他参数\n        \"\"\"\n        from apscheduler.schedulers.tornado import TornadoScheduler\n        from apscheduler.executors.pool import ThreadPoolExecutor\n        import pytz\n\n        self._scheduler = TornadoScheduler(\n            timezone=pytz.timezone('Asia/Shanghai'),\n            executors={'default': ThreadPoolExecutor(20)},\n            job_defaults={\n                'coalesce': False,\n                'max_instances': 1  # 相同job重复执行与否的判断，相同job最多同时多少个实例\n            }\n        )\n        super(scheduler, self).__init__(ensure_io_loop=True, **kwargs)\n        self.started = self._scheduler.state\n        if start:\n            self.start()\n\n    def start(self):\n        \"\"\"启动调度器\"\"\"\n        if not self.started:\n            self._scheduler.start()\n\n    def stop(self):\n        \"\"\"停止调度器\"\"\"\n        if self.started:\n            self._scheduler.shutdown()\n\n    def add_job(self, func, name=None, **kwargs):\n        \"\"\"添加定时任务\n\n        Args:\n            func: 要执行的函数\n            name: 任务名称,也作为任务ID\n            **kwargs: 其他调度参数\n\n        Returns:\n            Job: 添加的任务对象\n\n        示例:\n            i.add_job(name='hello',func = lambda x:'heoo',\n            seconds=5,start_date='2019-04-03 09:25:00')\n        \"\"\"\n        if 'trigger' not in kwargs:\n            kwargs['trigger'] = 'interval'\n\n        return self._scheduler.add_job(\n            func=lambda: self._emit(func()),\n            name=name,\n            id=name,\n            **kwargs)\n\n    def emit(self, x, asynchronous=None):\n        \"\"\"发送数据到流中\n\n        Args:\n            x: 要发送的数据\n            asynchronous: 是否异步执行\n\n        Returns:\n            Job: 添加的任务对象\n        \"\"\"\n        return self.add_job(**x)\n\n    def remove_job(self, name):\n        \"\"\"移除指定名称的任务\n\n        Args:\n            name: 要移除的任务名称\n\n        Returns:\n            bool: 是否成功移除\n        \"\"\"\n        return self._scheduler.remove_job(job_id=name)\n\n    def get_jobs(self,):\n        \"\"\"获取所有任务列表\n\n        Returns:\n            list: 所有任务对象列表\n        \"\"\"\n        return self._scheduler.get_jobs()\n\n\n@Stream.register_api(staticmethod)\nclass timer(Stream):\n    \"\"\"按照时间间隔执行函数并将返回值放入流.\n\n    定时器类,按照指定的时间间隔重复执行函数,并将函数返回值发送到数据流中。\n\n    参数:\n        interval (int/float): 执行时间间隔,单位为秒,默认1秒\n        ttl (int/float): 定时器生命周期,超过后自动停止,默认None表示永不停止\n        start (bool): 是否在创建后立即启动,默认False\n        func (callable): 要执行的函数,默认返回当前秒数\n        thread (bool): 是否在线程池中执行函数,默认False\n        threadcount (int): 线程池大小,默认5个线程\n        ensure_io_loop (bool): 是否确保IO循环存在,默认True\n        **kwargs: 传递给父类的额外参数\n\n    示例:\n        # 每秒打印当前时间\n        timer(interval=1, func=lambda: datetime.now(), start=True)\n\n        # 在线程池中每5秒执行一次耗时操作\n        timer(interval=5, func=heavy_task, thread=True, threadcount=3)\n    \"\"\"\n\n    def __init__(self,\n                 interval=1,\n                 ttl=None,\n                 start=False,\n                 func=lambda: datetime.datetime.now().second,\n                 thread=False,\n                 threadcount=5,\n                 ensure_io_loop=True,\n                 **kwargs):\n\n        self.interval = convert_interval(interval)  # 转换并存储时间间隔\n        self.func = func  # 存储要执行的函数\n        self.ttl = convert_interval(ttl) if ttl else None  # 转换并存储生命周期\n        self.thread = thread\n        if self.thread:  # 如果使用线程池则创建线程池\n            from concurrent.futures import ThreadPoolExecutor\n            self.thread_pool = ThreadPoolExecutor(threadcount)\n\n        super(timer, self).__init__(ensure_io_loop=ensure_io_loop, **kwargs)\n        self.stopped = True  # 初始状态为停止\n        if start:  # 如果需要自动启动则调用start()\n            self.start()\n\n    @gen.coroutine\n    def run(self):\n        \"\"\"定时器主循环,负责按照间隔执行函数\"\"\"\n        while True:\n            # 检查是否超过生命周期\n            if self.ttl and time.time() - self._start_time > self.ttl:\n                self.stop()\n\n            # 根据配置选择在线程池或主线程中执行函数\n            if self.thread:\n                self.thread_pool.submit(lambda: self.emit(self.func()))\n            else:\n                self.emit(self.func())\n            yield gen.sleep(self.interval)  # 等待到下一次执行时间\n            if self.stopped:  # 如果已停止则退出循环\n                break\n\n    def start(self):\n        \"\"\"启动定时器\"\"\"\n        self._start_time = time.time()  # 记录启动时间\n        if self.stopped:\n            self.stopped = False\n            self.loop.add_callback(self.run)  # 将主循环加入事件循环\n\n    def stop(self):\n        \"\"\"停止定时器\"\"\"\n        self.stopped = True\n\n\nclass when(object):\n    \"\"\"当某个事件发生时执行指定操作的类\n\n    该类用于监听数据流中的事件,当满足条件时执行相应的回调函数。\n    可以通过字符串匹配或自定义函数来定义触发条件。\n\n    参数:\n    -------\n    occasion : str或callable\n        触发条件,可以是字符串或函数:\n        - 字符串: 当数据流中的值包含该字符串时触发\n        - 函数: 接收数据流中的值作为输入,返回布尔值表示是否触发\n    source : Stream, 可选\n        数据源流,默认为全局日志流log\n\n    示例:\n    -------\n    # 字符串匹配方式\n    when('open').then(lambda :print('开盘啦'))\n\n    # 函数判断方式 \n    when(lambda x:x>2).then(lambda x:print(x,'x大于二'))\n    \"\"\"\n\n    def __init__(self, occasion, source=log):\n        self.occasion = occasion  # 存储触发条件\n        self.source = source  # 存储数据源流\n\n    def then(self, func, *args, **kwargs):\n        \"\"\"设置触发时要执行的回调函数\n\n        参数:\n        -------\n        func : callable\n            要执行的回调函数\n        *args, **kwargs : \n            传递给回调函数的额外参数\n\n        返回:\n        -------\n        Sink\n            返回sink对象,用于接收数据流\n        \"\"\"\n        if callable(self.occasion):  # 如果是函数条件,传入数据值作为参数\n            return self.source.filter(self.occasion).sink(\n                lambda x: func(x, *args, **kwargs))\n        else:  # 如果是字符串条件,只执行回调不传参\n            return self.source.filter(lambda x: self.occasion in str(x)).sink(\n                lambda x: func(*args, **kwargs))\n\n\nwhen('exit', source=log).then(lambda: print('bye bye,', os.getpid()))\n"
					},
					"",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwLAAAAAAAAfAsAAAAAAAAAAAAAAADwvw"
				],
				[
					404,
					1,
					"paste",
					null,
					"AgAAANUKAAAAAAAA5QoAAAAAAAAAAAAA5QoAAAAAAADlCgAAAAAAAAcAAABzdGFydGVk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUKAAAAAAAA3AoAAAAAAAAAAAAAAADwvw"
				],
				[
					410,
					1,
					"paste",
					null,
					"AgAAAEQLAAAAAAAAVAsAAAAAAAAAAAAAVAsAAAAAAABUCwAAAAAAAAcAAABzdGFydGVk",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQLAAAAAAAASwsAAAAAAAAAAAAAAADwvw"
				],
				[
					423,
					1,
					"left_delete",
					null,
					"AQAAAEcKAAAAAAAARwoAAAAAAAAkAAAAc2VsZi5zdGFydGVkID0gc2VsZi5fc2NoZWR1bGVyLnN0YXRl",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsKAAAAAAAARwoAAAAAAAAAAAAAAADwvw"
				],
				[
					425,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 7667,
						"text": "import os\nimport atexit\nfrom .bus import log\nfrom .core import Stream\nfrom .utils.time import convert_interval\nimport datetime\nfrom tornado import gen\nimport time\n\n\n\"\"\"定时任务和事件调度模块\n\n本模块提供了定时任务调度和事件处理的功能。主要包含:\n\n- exit(): 进程退出时发送信号\n- scheduler: 定时任务调度流\n\n示例\n-------\n# 基本使用\n>>> from deva import when\n\n# 退出事件处理\n>>> when('exit').then(lambda: print('bye'))  # 进程退出时打印\n\n# 创建调度器\n>>> s = scheduler()  # 创建调度器实例\n\n# 定时任务示例\n# 1. 间隔执行\n>>> s.add_job(lambda: print('hello'), seconds=5)  # 每5秒打印一次\n>>> s.add_job(lambda: print('每分钟执行'), minutes=1)  # 每分钟执行一次\n\n# 2. 定时执行\n>>> s.add_job(lambda: print('每天9点执行'), trigger='cron', hour=9)  # 每天9点执行\n\n# 3. 延迟执行\n>>> s.add_job(lambda: print('5秒后执行一次'), run_date=datetime.datetime.now() + datetime.timedelta(seconds=5))  # 延迟5秒执行一次\n\n# 任务管理\n>>> s.get_jobs()  # 获取所有已添加的任务\n>>> s.remove_job('job_1')  # 移除指定任务\n\n参见\n--------\ndeva.core.Stream : 基础流处理类\ndeva.bus : 消息总线模块\n\"\"\"\n\n\n@atexit.register\ndef exit():\n    \"\"\"进程退出时发信号到log.\n\n    Examples:\n    ----------\n    when('exit',source=log).then(lambda :print('bye bye'))\n    \"\"\"\n    #\n\n    return 'exit' >> log\n\n\n@Stream.register_api(staticmethod)\nclass scheduler(Stream):\n    \"\"\"定时流.\n\n    一个基于apscheduler的定时任务调度器,可以按照固定时间间隔执行任务并将结果放入流中。\n\n    示例:\n    -------\n    s = scheduler()  # 创建调度器\n    s.add_job(name='hello',seconds=5,start_date='2019-04-03 09:25:00')  # 添加任务\n    s.get_jobs()>>pmap(lambda x:x.next_run_time)>>to_list  # 获取所有任务的下次执行时间\n\n    con = s.map(lambda x:\n       match(x,\n            'open',lambda x:x>>warn,\n             'hello',lambda x:x>>warn,\n             ANY,'None',\n            ))\n\n    s.add_job(func=lambda :print('yahoo'),seconds=5)  # 添加简单的打印任务\n\n    参数:\n    -------\n    weeks (int): 等待的周数\n    days (int): 等待的天数  \n    hours (int): 等待的小时数\n    minutes (int): 等待的分钟数\n    seconds (int): 等待的秒数\n    start_date (datetime|str): 任务开始时间\n    end_date (datetime|str): 任务结束时间\n    timezone (datetime.tzinfo|str): 时区设置\n    jitter (int|None): 任务执行时间的随机偏移量(秒)\n    \"\"\"\n\n    def __init__(self, start=True, **kwargs):\n        \"\"\"初始化调度器\n\n        Args:\n            start (bool): 是否立即启动调度器\n            **kwargs: 其他参数\n        \"\"\"\n        from apscheduler.schedulers.tornado import TornadoScheduler\n        from apscheduler.executors.pool import ThreadPoolExecutor\n        import pytz\n\n        self._scheduler = TornadoScheduler(\n            timezone=pytz.timezone('Asia/Shanghai'),\n            executors={'default': ThreadPoolExecutor(20)},\n            job_defaults={\n                'coalesce': False,\n                'max_instances': 1  # 相同job重复执行与否的判断，相同job最多同时多少个实例\n            }\n        )\n        super(scheduler, self).__init__(ensure_io_loop=True, **kwargs)\n\n        if start:\n            self.start()\n\n    def start(self):\n        \"\"\"启动调度器\"\"\"\n        if not self._scheduler.state:\n            self._scheduler.start()\n\n    def stop(self):\n        \"\"\"停止调度器\"\"\"\n        if self._scheduler.state:\n            self._scheduler.shutdown()\n\n    def add_job(self, func, name=None, **kwargs):\n        \"\"\"添加定时任务\n\n        Args:\n            func: 要执行的函数\n            name: 任务名称,也作为任务ID\n            **kwargs: 其他调度参数\n\n        Returns:\n            Job: 添加的任务对象\n\n        示例:\n            i.add_job(name='hello',func = lambda x:'heoo',\n            seconds=5,start_date='2019-04-03 09:25:00')\n        \"\"\"\n        if 'trigger' not in kwargs:\n            kwargs['trigger'] = 'interval'\n\n        return self._scheduler.add_job(\n            func=lambda: self._emit(func()),\n            name=name,\n            id=name,\n            **kwargs)\n\n    def emit(self, x, asynchronous=None):\n        \"\"\"发送数据到流中\n\n        Args:\n            x: 要发送的数据\n            asynchronous: 是否异步执行\n\n        Returns:\n            Job: 添加的任务对象\n        \"\"\"\n        return self.add_job(**x)\n\n    def remove_job(self, name):\n        \"\"\"移除指定名称的任务\n\n        Args:\n            name: 要移除的任务名称\n\n        Returns:\n            bool: 是否成功移除\n        \"\"\"\n        return self._scheduler.remove_job(job_id=name)\n\n    def get_jobs(self,):\n        \"\"\"获取所有任务列表\n\n        Returns:\n            list: 所有任务对象列表\n        \"\"\"\n        return self._scheduler.get_jobs()\n\n\n@Stream.register_api(staticmethod)\nclass timer(Stream):\n    \"\"\"按照时间间隔执行函数并将返回值放入流.\n\n    定时器类,按照指定的时间间隔重复执行函数,并将函数返回值发送到数据流中。\n\n    参数:\n        interval (int/float): 执行时间间隔,单位为秒,默认1秒\n        ttl (int/float): 定时器生命周期,超过后自动停止,默认None表示永不停止\n        start (bool): 是否在创建后立即启动,默认False\n        func (callable): 要执行的函数,默认返回当前秒数\n        thread (bool): 是否在线程池中执行函数,默认False\n        threadcount (int): 线程池大小,默认5个线程\n        ensure_io_loop (bool): 是否确保IO循环存在,默认True\n        **kwargs: 传递给父类的额外参数\n\n    示例:\n        # 每秒打印当前时间\n        timer(interval=1, func=lambda: datetime.now(), start=True)\n\n        # 在线程池中每5秒执行一次耗时操作\n        timer(interval=5, func=heavy_task, thread=True, threadcount=3)\n    \"\"\"\n\n    def __init__(self,\n                 interval=1,\n                 ttl=None,\n                 start=False,\n                 func=lambda: datetime.datetime.now().second,\n                 thread=False,\n                 threadcount=5,\n                 ensure_io_loop=True,\n                 **kwargs):\n\n        self.interval = convert_interval(interval)  # 转换并存储时间间隔\n        self.func = func  # 存储要执行的函数\n        self.ttl = convert_interval(ttl) if ttl else None  # 转换并存储生命周期\n        self.thread = thread\n        if self.thread:  # 如果使用线程池则创建线程池\n            from concurrent.futures import ThreadPoolExecutor\n            self.thread_pool = ThreadPoolExecutor(threadcount)\n\n        super(timer, self).__init__(ensure_io_loop=ensure_io_loop, **kwargs)\n        self.stopped = True  # 初始状态为停止\n        if start:  # 如果需要自动启动则调用start()\n            self.start()\n\n    @gen.coroutine\n    def run(self):\n        \"\"\"定时器主循环,负责按照间隔执行函数\"\"\"\n        while True:\n            # 检查是否超过生命周期\n            if self.ttl and time.time() - self._start_time > self.ttl:\n                self.stop()\n\n            # 根据配置选择在线程池或主线程中执行函数\n            if self.thread:\n                self.thread_pool.submit(lambda: self.emit(self.func()))\n            else:\n                self.emit(self.func())\n            yield gen.sleep(self.interval)  # 等待到下一次执行时间\n            if self.stopped:  # 如果已停止则退出循环\n                break\n\n    def start(self):\n        \"\"\"启动定时器\"\"\"\n        self._start_time = time.time()  # 记录启动时间\n        if self.stopped:\n            self.stopped = False\n            self.loop.add_callback(self.run)  # 将主循环加入事件循环\n\n    def stop(self):\n        \"\"\"停止定时器\"\"\"\n        self.stopped = True\n\n\nclass when(object):\n    \"\"\"当某个事件发生时执行指定操作的类\n\n    该类用于监听数据流中的事件,当满足条件时执行相应的回调函数。\n    可以通过字符串匹配或自定义函数来定义触发条件。\n\n    参数:\n    -------\n    occasion : str或callable\n        触发条件,可以是字符串或函数:\n        - 字符串: 当数据流中的值包含该字符串时触发\n        - 函数: 接收数据流中的值作为输入,返回布尔值表示是否触发\n    source : Stream, 可选\n        数据源流,默认为全局日志流log\n\n    示例:\n    -------\n    # 字符串匹配方式\n    when('open').then(lambda :print('开盘啦'))\n\n    # 函数判断方式 \n    when(lambda x:x>2).then(lambda x:print(x,'x大于二'))\n    \"\"\"\n\n    def __init__(self, occasion, source=log):\n        self.occasion = occasion  # 存储触发条件\n        self.source = source  # 存储数据源流\n\n    def then(self, func, *args, **kwargs):\n        \"\"\"设置触发时要执行的回调函数\n\n        参数:\n        -------\n        func : callable\n            要执行的回调函数\n        *args, **kwargs : \n            传递给回调函数的额外参数\n\n        返回:\n        -------\n        Sink\n            返回sink对象,用于接收数据流\n        \"\"\"\n        if callable(self.occasion):  # 如果是函数条件,传入数据值作为参数\n            return self.source.filter(self.occasion).sink(\n                lambda x: func(x, *args, **kwargs))\n        else:  # 如果是字符串条件,只执行回调不传参\n            return self.source.filter(lambda x: self.occasion in str(x)).sink(\n                lambda x: func(*args, **kwargs))\n\n\nwhen('exit', source=log).then(lambda: print('bye bye,', os.getpid()))\n"
					},
					"",
					"DAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcKAAAAAAAARwoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "deva/core.py",
			"settings":
			{
				"buffer_size": 37005,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/local/bin/xattr",
			"settings":
			{
				"buffer_size": 209,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					2,
					"left_delete",
					null,
					"AgAAAAgAAAAAAAAACAAAAAAAAAAjAAAAb2NhbC9vcHQvcHl0aG9uQDMuMTAvYmluL3B5dGhvbjMuMTAHAAAAAAAAAAcAAAAAAAAAAQAAAGw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACsAAAAAAAAACAAAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "bin."
					},
					"BAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAAoAAAAAAAAACgAAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "/python3"
					},
					"CAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "deva/utils/sqlitedict.py",
			"settings":
			{
				"buffer_size": 21658,
				"line_ending": "Unix"
			}
		},
		{
			"file": "deva/store.py",
			"settings":
			{
				"buffer_size": 5896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAN0LAAAAAAAA3gsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0LAAAAAAAA3QsAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"reindent",
					null,
					"AQAAAN4LAAAAAAAA5gsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4LAAAAAAAA3gsAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAAOILAAAAAAAA4gsAAAAAAAAEAAAAICAgIA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYLAAAAAAAA5gsAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAOILAAAAAAAA4wsAAAAAAAAAAAAA4wsAAAAAAADnCwAAAAAAAAAAAADeCwAAAAAAAN4LAAAAAAAABAAAACAgICA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOILAAAAAAAA4gsAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"",
					null,
					"AQAAAOMLAAAAAAAA5AsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMLAAAAAAAA4wsAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"",
					null,
					"AQAAAOMLAAAAAAAA5QsAAAAAAAABAAAAZA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQLAAAAAAAA5AsAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"",
					null,
					"AQAAAOMLAAAAAAAA5wsAAAAAAAACAAAAZGU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOULAAAAAAAA5QsAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"",
					null,
					"AQAAAOMLAAAAAAAA4wsAAAAAAAAEAAAAZGUnZg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcLAAAAAAAA5wsAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "得分"
					},
					"AgAAAOMLAAAAAAAA5AsAAAAAAAAAAAAA5AsAAAAAAADlCwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMLAAAAAAAA4wsAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					2,
					"left_delete",
					null,
					"AgAAAOQLAAAAAAAA5AsAAAAAAAADAAAA5YiG4wsAAAAAAADjCwAAAAAAAAMAAADlvpc",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOULAAAAAAAA5QsAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAOMLAAAAAAAA5AsAAAAAAAAAAAAA5AsAAAAAAADlCwAAAAAAAAAAAADlCwAAAAAAAOYLAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMLAAAAAAAA4wsAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " get_"
					},
					"BQAAAOYLAAAAAAAA5wsAAAAAAAAAAAAA5wsAAAAAAADoCwAAAAAAAAAAAADoCwAAAAAAAOkLAAAAAAAAAAAAAOkLAAAAAAAA6gsAAAAAAAAAAAAA6gsAAAAAAADrCwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYLAAAAAAAA5gsAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAOsLAAAAAAAA7AsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsLAAAAAAAA6wsAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAOsLAAAAAAAA6wsAAAAAAAABAAAAeQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwLAAAAAAAA7AsAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "tables"
					},
					"BgAAAOsLAAAAAAAA7AsAAAAAAAAAAAAA7AsAAAAAAADtCwAAAAAAAAAAAADtCwAAAAAAAO4LAAAAAAAAAAAAAO4LAAAAAAAA7wsAAAAAAAAAAAAA7wsAAAAAAADwCwAAAAAAAAAAAADwCwAAAAAAAPELAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsLAAAAAAAA6wsAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPELAAAAAAAA8wsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPELAAAAAAAA8QsAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "self,"
					},
					"BQAAAPILAAAAAAAA8wsAAAAAAAAAAAAA8wsAAAAAAAD0CwAAAAAAAAAAAAD0CwAAAAAAAPULAAAAAAAAAAAAAPULAAAAAAAA9gsAAAAAAAAAAAAA9gsAAAAAAAD3CwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPILAAAAAAAA8gsAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPgLAAAAAAAA+QsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgLAAAAAAAA+AsAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAPkLAAAAAAAA+gsAAAAAAAAAAAAA+gsAAAAAAAD+CwAAAAAAAAAAAAD+CwAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAAEDAAAAAAAAAAAAAAEDAAAAAAAAAUMAAAAAAAAAAAAAAUMAAAAAAAABgwAAAAAAAAAAAAABgwAAAAAAAAHDAAAAAAAAAAAAAAHDAAAAAAAAAgMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkLAAAAAAAA+QsAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " self"
					},
					"BQAAAAgMAAAAAAAACQwAAAAAAAAAAAAACQwAAAAAAAAKDAAAAAAAAAAAAAAKDAAAAAAAAAsMAAAAAAAAAAAAAAsMAAAAAAAADAwAAAAAAAAAAAAADAwAAAAAAAANDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgMAAAAAAAACAwAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ".db."
					},
					"BAAAAA0MAAAAAAAADgwAAAAAAAAAAAAADgwAAAAAAAAPDAAAAAAAAAAAAAAPDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAEQwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0MAAAAAAAADQwAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "ta"
					},
					"AgAAABEMAAAAAAAAEgwAAAAAAAAAAAAAEgwAAAAAAAATDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEMAAAAAAAAEQwAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_completion",
					{
						"completion": "tables",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "tables"
					},
					"AgAAABEMAAAAAAAAEQwAAAAAAAACAAAAdGERDAAAAAAAABcMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMMAAAAAAAAEwwAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAgDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcMAAAAAAAAFwwAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 5999,
						"text": "from tornado import gen\nfrom .utils.sqlitedict import SqliteDict\nfrom .core import Stream\nfrom .pipe import passed, first\nimport os\nimport time\n\n\n@Stream.register_api()\nclass DBStream(Stream):\n    \"\"\"基于 SQLite 的持久化数据流存储类\n\n    功能特性:\n    1. 持久化存储: 基于 SQLite 实现键值对的持久化存储\n    2. 流式操作: 支持数据流式处理和传输\n    3. 自动时间戳: 单值存储时自动使用时间戳作为键\n    4. 容量限制: 可设置最大存储容量，自动清理旧数据\n    5. 时间切片: 支持基于时间范围的数据查询\n\n    主要用法:\n    1. 基础存储:\n        db = DBStream('table_name', './data/mydb')  # 创建数据库\n        db['key'] = 'value'                         # 直接赋值\n        value = db['key']                           # 直接读取\n\n    2. 流式写入:\n        123 >> db                    # 单值写入(自动使用时间戳作为键)\n        ('key', 'value') >> db      # 元组写入\n        {'key': 'value'} >> db      # 字典写入\n\n    3. 遍历操作:\n        db.keys() | ls              # 查看所有键\n        db.values() | ls            # 查看所有值\n        db.items() | ls             # 查看所有键值对\n\n    4. 时间序列:\n        # 查询特定时间范围的数据\n        start = '2020-03-23 10:20:35'\n        end = '2020-03-23 11:20:35'\n        for key in db[start:end]:\n            print(db[key])\n\n    5. 容量限制:\n        # 创建最多存储10条记录的数据表\n        db = DBStream('cache', maxsize=10)\n\n    6. 数据回放:\n        # 按时间顺序回放数据\n        db.replay(start='2020-03-23 10:20:35', interval=1)  # 每秒回放一条\n\n    参数说明:\n        name (str): 表名，默认为 'default'\n        filename (str): 数据库文件路径，默认在 ~/.deva/nb.sqlite\n        maxsize (int): 最大存储记录数，默认无限制\n        log (Stream): 日志流对象，默认为 passed\n    \"\"\"\n\n    def __init__(self, name='default', filename=None,\n                 maxsize=None, log=passed, **kwargs):\n        \"\"\"构建数据库流对象.\n\n        Args:\n            **kwargs: 流的其他参数\n            name: 表名 (default: {'default'})\n            filename: 存储的文件名 (default: {'nb'})\n            maxsize: 数据表长度 (default: {None})\n            log: 日志流 (default: {passed})\n        \"\"\"\n        # 初始化日志流和表名\n        self.log = log\n        self.tablename = name\n        self.name = name\n        # 设置表的最大容量限制\n        self.maxsize = maxsize\n\n        super(DBStream, self).__init__()\n        self.name = name\n        if not filename:\n            try:\n                # 如果未指定文件名，默认在用户目录下创建 .deva/nb.sqlite\n                if not os.path.exists(os.path.expanduser('~/.deva/')):\n                    os.makedirs(os.path.expanduser('~/.deva/'))\n                self.filename = os.path.expanduser('~/.deva/nb.sqlite')\n            except Exception as e:\n                # 如果无法在用户目录创建，则在当前目录创建\n                print(e, 'create dbfile nb.sqlite in curdir')\n                self.filename = 'nb.sqlite'\n\n        else:\n            self.filename = filename + '.sqlite'\n\n        # 初始化 SQLite 字典，启用自动提交\n        self.db = SqliteDict(\n            self.filename,\n            tablename=self.tablename,\n            autocommit=True,\n            **kwargs)\n\n        self.keys = self.db.keys\n        self.values = self.db.values\n        self.items = self.db.items\n        self.get = self.db.get\n        self.clear = self.db.clear\n        self.tables = self.db.tables\n        self._check_size_limit()\n\n    def get_tables(self,):\n        return self.db.tables\n\n    def emit(self, x, asynchronous=False):\n        self.update(x)\n        # return super().emit(x, asynchronous=asynchronous)\n\n    def _check_size_limit(self):\n        if self.maxsize:\n            while len(self.db) > self.maxsize:\n                self.db.popitem()\n\n    def update(self, x):\n        # 记录日志\n        x >> self.log\n\n        # 根据输入类型不同进行不同的处理\n        if isinstance(x, dict):\n            # 如果是字典，直接更新\n            self.db.update(x)\n        elif isinstance(x, tuple):\n            # 如果是元组，将第一个元素作为键，第二个作为值\n            key, value = x\n            self.db.update({key: value})\n        else:\n            # 其他情况使用当前时间戳作为键\n            key = time.time()\n            value = x\n            self.db.update({key: value})\n\n        # 检查并维护最大容量限制\n        self._check_size_limit()\n        self._emit(x)\n\n    def __slice__(self, start='2020-03-23 00:28:34',\n                  stop='2020-03-23 00:28:35'):\n        # 时间切片操作，用于查询特定时间范围内的数据\n        from datetime import datetime\n\n        # 如果没有指定开始时间，使用最早的记录时间\n        if start:\n            start = datetime.fromisoformat(start).timestamp()\n        else:\n            start = float(self.keys() | first)\n        # 如果没有指定结束时间，使用当前时间\n        stop = datetime.fromisoformat(stop).timestamp()\\\n            if stop else time.time()\n\n        # 遍历所有在时间范围内的键\n        for key in self.keys():\n            if start < float(key) < stop:\n                yield key\n\n    @gen.coroutine\n    def replay(self, start=None, end=None, interval=None):\n        \"\"\"ts db data replay.\n\n        时序数据库数据回放，仅限于key是时间的数据\n\n        Args:\n            start: 开始时间 (default: {None}),start='2020-03-23 10:20:35'\n            end: 结束时间 (default: {None})\n            interval: 回放间隔 (default: {None})\n\n        Yields:\n            [description]\n            [type]\n\n        Examples::\n\n            db = NB('ts_test')\n            for i in range(100):\n                i >> db\n            db>>log\n            db.replay()\n\n            [2020-03-23 06:38:16.521248] INFO: log: 2\n            [2020-03-23 06:38:17.529558] INFO: log: 3\n            [2020-03-23 06:38:18.533068] INFO: log: 4\n            [2020-03-23 06:38:19.538777] INFO: log: 5\n\n\n        \"\"\"\n        for key in self[start:end]:\n            self._emit(self[key])\n            yield gen.moment if not interval else gen.sleep(interval)\n\n    def __len__(self,):\n        return self.db.__len__()\n\n    def __getitem__(self, item):\n        if isinstance(item, slice):\n            # 时间为key的时间切片\n            return self.__slice__(item.start, item.stop)\n        else:\n            return self.db.__getitem__(item)\n\n    def __setitem__(self, key, value):\n        self.db.__setitem__(key, value)\n        self._check_size_limit()\n        return self\n\n    def __delitem__(self, x):\n        return self.db.__delitem__(x)\n\n    def __contains__(self, x):\n        return self.db.__contains__(x)\n\n    def __iter__(self,):\n        return self.db.__iter__()\n"
					},
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAMAAAAAAAAIAwAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					4,
					"left_delete",
					null,
					"BAAAAK0LAAAAAAAArQsAAAAAAAABAAAAX6wLAAAAAAAArAsAAAAAAAABAAAAdKsLAAAAAAAAqwsAAAAAAAABAAAAZaoLAAAAAAAAqgsAAAAAAAABAAAAZw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4LAAAAAAAArgsAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACrCwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYLAAAAAAAApgsAAAAAAAAAAAAAAAA8QA"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "@pro"
					},
					"BAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAKkLAAAAAAAAqgsAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYLAAAAAAAApgsAAAAAAAAAAAAAAAA8QA"
				],
				[
					39,
					1,
					"insert_completion",
					{
						"completion": "property",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "property"
					},
					"AgAAAKcLAAAAAAAApwsAAAAAAAADAAAAcHJvpwsAAAAAAACvCwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoLAAAAAAAAqgsAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAFsLAAAAAAAAWwsAAAAAAAAlAAAAICAgICAgICBzZWxmLnRhYmxlcyA9IHNlbGYuZGIudGFibGVzCg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsLAAAAAAAAgAsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "# chatgpt\nfrom openai import AsyncOpenAI\nfrom deva import *\n\n\napi_key = '919a795d-207b-4ccf-8fd4-83ee5a23e961'\nAPI_URL = \"https://api.sambanova.ai/v1/\"\nmodel = \"Meta-Llama-3.1-8B-Instruct\"\n\nchatgpt_client = AsyncOpenAI(api_key=api_key, base_url=API_URL)\n\nconversation_msg_dict = {}\n\n\nasync def get_gpt(content, open_id='default', log_func=print):\n    start_time = time.time()\n\n    def sendmsg(content):\n        if not content.startswith('检索'):\n            print(content)\n\n    openai_messages = [\n        {\"role\": \"user\", \"content\": content}\n    ]\n\n    if open_id not in conversation_msg_dict:\n        conversation_msg_dict[open_id] = list()\n    conversation_msg_dict[open_id].append({\"role\": \"user\", \"content\": content})\n    openai_messages = conversation_msg_dict[open_id]\n\n    completion = None\n    try:\n        completion = await chatgpt_client.chat.completions.create(\n            # model=\"gpt-3.5-turbo-16k\",\n            model=model,\n            messages=[\n                {'role': 'user', 'content': content},\n                #                 {'role': 'system', 'content': 'You are a 元神机器人 imitating 大有. Pretend to be 大有.可以提供决策辅助，和遗憾对话等，国学学习等功能。'},\n            ],\n            stream=True,\n            max_tokens=1200,\n\n        )\n    except:\n        completion = None\n        log_func(\"catch exception,err_msg:%s\" % traceback.format_exc())\n\n    if not completion:\n        sendmsg(\"当前请求人数过多，请稍后重试~~\")\n        return\n\n    total_text = \"\"\n    completion_text = \"\"\n    async for event in completion:\n        if event.choices[0].delta.content:\n            completion_text += event.choices[0].delta.content\n            cur_time = time.time()\n            if \"\\n\" in event.choices[0].delta.content and cur_time-start_time >= 3:\n                completion_text = completion_text.strip(\"\\n\")\n                if completion_text:\n                    log_func(\"completion_text:{} time_cost:{}s\".format(\n                        completion_text, cur_time-start_time))\n                    total_text += completion_text\n                    sendmsg(completion_text)\n                    start_time = time.time()\n                completion_text = \"\"\n        if completion_text and not event.choices[0].delta.content:\n            log_func(\"completion_text:{} time_cost:{}s\".format(\n                completion_text, time.time()-start_time))\n            total_text += completion_text\n            sendmsg(completion_text)\n            start_time = time.time()\n            completion_text = \"\"\n\n    if total_text:\n        conversation_msg_dict[open_id].append({\"role\": \"assistant\", \"content\": total_text})\n        if len(conversation_msg_dict[open_id]) > 6:\n            conversation_msg_dict[open_id] = conversation_msg_dict[open_id][-6:]\n\n    return total_text\n# get_gpt(f'解读一下https://www.earningswhispers.com/earningsnews',log_func=passed)|print\nget_gpt('你好, 你是谁', log_func=passed) | log\n\nDeva.run()\n",
			"file": "/Users/spark/pycharmproject/naja/test.py",
			"file_size": 2998,
			"file_write_time": 133786535939087065,
			"settings":
			{
				"buffer_size": 2882,
				"line_ending": "Unix",
				"name": "# chatgpt"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAIQsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " deva"
					},
					"BQAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 2869,
						"text": "# chatgpt\nfrom openai import AsyncOpenAI\nfrom deva import *\n\n\napi_key = '919a795d-207b-4ccf-8fd4-83ee5a23e961'\nAPI_URL = \"https://api.sambanova.ai/v1/\"\nmodel = \"Meta-Llama-3.1-8B-Instruct\"\n\nchatgpt_client = AsyncOpenAI(api_key=api_key, base_url=API_URL)\n\nconversation_msg_dict = {}\n\n\nasync def get_gpt(content, open_id='default', log_func=print):\n    start_time = time.time()\n\n    def sendmsg(content):\n        if not content.startswith('检索'):\n            print(content)\n\n    openai_messages = [\n        {\"role\": \"user\", \"content\": content}\n    ]\n\n    if open_id not in conversation_msg_dict:\n        conversation_msg_dict[open_id] = list()\n    conversation_msg_dict[open_id].append({\"role\": \"user\", \"content\": content})\n    openai_messages = conversation_msg_dict[open_id]\n\n    completion = None\n    try:\n        completion = await chatgpt_client.chat.completions.create(\n            # model=\"gpt-3.5-turbo-16k\",\n            model=model,\n            messages=[\n                {'role': 'user', 'content': content},\n                #                 {'role': 'system', 'content': 'You are a 元神机器人 imitating 大有. Pretend to be 大有.可以提供决策辅助，和遗憾对话等，国学学习等功能。'},\n            ],\n            stream=True,\n            max_tokens=1200,\n\n        )\n    except:\n        completion = None\n        log_func(\"catch exception,err_msg:%s\" % traceback.format_exc())\n\n    if not completion:\n        sendmsg(\"当前请求人数过多，请稍后重试~~\")\n        return\n\n    total_text = \"\"\n    completion_text = \"\"\n    async for event in completion:\n        if event.choices[0].delta.content:\n            completion_text += event.choices[0].delta.content\n            cur_time = time.time()\n            if \"\\n\" in event.choices[0].delta.content and cur_time-start_time >= 3:\n                completion_text = completion_text.strip(\"\\n\")\n                if completion_text:\n                    log_func(\"completion_text:{} time_cost:{}s\".format(\n                        completion_text, cur_time-start_time))\n                    total_text += completion_text\n                    sendmsg(completion_text)\n                    start_time = time.time()\n                completion_text = \"\"\n        if completion_text and not event.choices[0].delta.content:\n            log_func(\"completion_text:{} time_cost:{}s\".format(\n                completion_text, time.time()-start_time))\n            total_text += completion_text\n            sendmsg(completion_text)\n            start_time = time.time()\n            completion_text = \"\"\n\n    if total_text:\n        conversation_msg_dict[open_id].append({\"role\": \"assistant\", \"content\": total_text})\n        if len(conversation_msg_dict[open_id]) > 6:\n            conversation_msg_dict[open_id] = conversation_msg_dict[open_id][-6:]\n\n    return total_text\n# get_gpt(f'解读一下https://www.earningswhispers.com/earningsnews',log_func=passed)|print\nget_gpt('你好, 你是谁', log_func=passed) | log\n"
					},
					"AQAAAAAAAAAAAAAANgsAAAAAAACpCwAAIyBjaGF0Z3B0CmZyb20gb3BlbmFpIGltcG9ydCBBc3luY09wZW5BSQpmcm9tIGRldmEgaW1wb3J0ICoKCgphcGlfa2V5ID0gJzkxOWE3OTVkLTIwN2ItNGNjZi04ZmQ0LTgzZWU1YTIzZTk2MScKQVBJX1VSTCA9ICJodHRwczovL2FwaS5zYW1iYW5vdmEuYWkvdjEvIgptb2RlbCA9ICJNZXRhLUxsYW1hLTMuMS04Qi1JbnN0cnVjdCIKCmNoYXRncHRfY2xpZW50ID0gQXN5bmNPcGVuQUkoYXBpX2tleT1hcGlfa2V5LCBiYXNlX3VybD1BUElfVVJMKQoKY29udmVyc2F0aW9uX21zZ19kaWN0ID0ge30KCmFzeW5jIGRlZiBnZXRfZ3B0KGNvbnRlbnQsb3Blbl9pZD0nZGVmYXVsdCcsbG9nX2Z1bmM9cHJpbnQpOgogICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICBkZWYgc2VuZG1zZyhjb250ZW50KTogCiAgICAgICAgaWYgbm90IGNvbnRlbnQuc3RhcnRzd2l0aCgn5qOA57SiJyk6CiAgICAgICAgICAgIHByaW50KGNvbnRlbnQpCiAgICAKICAgIAogICAgb3BlbmFpX21lc3NhZ2VzID0gWwogICAgICAgIHsicm9sZSI6ICJ1c2VyIiwgImNvbnRlbnQiOiBjb250ZW50fQogICAgXQogICAgCiAgICBpZiBvcGVuX2lkIG5vdCBpbiBjb252ZXJzYXRpb25fbXNnX2RpY3Q6CiAgICAgICAgY29udmVyc2F0aW9uX21zZ19kaWN0W29wZW5faWRdID0gbGlzdCgpCiAgICBjb252ZXJzYXRpb25fbXNnX2RpY3Rbb3Blbl9pZF0uYXBwZW5kKHsicm9sZSI6ICJ1c2VyIiwgImNvbnRlbnQiOiBjb250ZW50fSkKICAgIG9wZW5haV9tZXNzYWdlcyA9IGNvbnZlcnNhdGlvbl9tc2dfZGljdFtvcGVuX2lkXQogICAgCiAgICAKICAgIGNvbXBsZXRpb24gPSBOb25lCiAgICB0cnk6CiAgICAgICAgY29tcGxldGlvbiA9IGF3YWl0IGNoYXRncHRfY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKAogICAgICAgICAgICAjIG1vZGVsPSJncHQtMy41LXR1cmJvLTE2ayIsCiAgICAgICAgICAgIG1vZGVsPW1vZGVsLAogICAgICAgICAgICBtZXNzYWdlcz1bCiAgICAgICAgICAgICAgICB7J3JvbGUnOiAndXNlcicsICdjb250ZW50JzogY29udGVudH0sCiMgICAgICAgICAgICAgICAgIHsncm9sZSc6ICdzeXN0ZW0nLCAnY29udGVudCc6ICdZb3UgYXJlIGEg5YWD56We5py65Zmo5Lq6IGltaXRhdGluZyDlpKfmnIkuIFByZXRlbmQgdG8gYmUg5aSn5pyJLuWPr+S7peaPkOS+m+WGs+etlui+heWKqe+8jOWSjOmBl+aGvuWvueivneetie+8jOWbveWtpuWtpuS5oOetieWKn+iDveOAgid9LAogICAgICAgICAgICBdLAogICAgICAgICAgICBzdHJlYW09VHJ1ZSwKICAgICAgICAgICAgbWF4X3Rva2Vucz0xMjAwLAoKICAgICAgICApCiAgICBleGNlcHQ6CiAgICAgICAgY29tcGxldGlvbiA9IE5vbmUKICAgICAgICBsb2dfZnVuYygiY2F0Y2ggZXhjZXB0aW9uLGVycl9tc2c6JXMiICUgdHJhY2ViYWNrLmZvcm1hdF9leGMoKSkKCiAgICBpZiBub3QgY29tcGxldGlvbjoKICAgICAgICBzZW5kbXNnKCLlvZPliY3or7fmsYLkurrmlbDov4flpJrvvIzor7fnqI3lkI7ph43or5V+fiIpCiAgICAgICAgcmV0dXJuCgogICAgdG90YWxfdGV4dCA9ICIiCiAgICBjb21wbGV0aW9uX3RleHQgPSAiIgogICAgYXN5bmMgZm9yIGV2ZW50IGluIGNvbXBsZXRpb246CiAgICAgICAgaWYgZXZlbnQuY2hvaWNlc1swXS5kZWx0YS5jb250ZW50OgogICAgICAgICAgICBjb21wbGV0aW9uX3RleHQgKz0gZXZlbnQuY2hvaWNlc1swXS5kZWx0YS5jb250ZW50CiAgICAgICAgICAgIGN1cl90aW1lID0gdGltZS50aW1lKCkKICAgICAgICAgICAgaWYgIlxuIiBpbiBldmVudC5jaG9pY2VzWzBdLmRlbHRhLmNvbnRlbnQgYW5kIGN1cl90aW1lLXN0YXJ0X3RpbWUgPj0gMzoKICAgICAgICAgICAgICAgIGNvbXBsZXRpb25fdGV4dCA9IGNvbXBsZXRpb25fdGV4dC5zdHJpcCgiXG4iKQogICAgICAgICAgICAgICAgaWYgY29tcGxldGlvbl90ZXh0OgogICAgICAgICAgICAgICAgICAgIGxvZ19mdW5jKCJjb21wbGV0aW9uX3RleHQ6e30gdGltZV9jb3N0Ont9cyIuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uX3RleHQsIGN1cl90aW1lLXN0YXJ0X3RpbWUpKQogICAgICAgICAgICAgICAgICAgIHRvdGFsX3RleHQgKz0gY29tcGxldGlvbl90ZXh0CiAgICAgICAgICAgICAgICAgICAgc2VuZG1zZyhjb21wbGV0aW9uX3RleHQpCiAgICAgICAgICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgICAgICBjb21wbGV0aW9uX3RleHQgPSAiIgogICAgICAgIGlmIGNvbXBsZXRpb25fdGV4dCBhbmQgbm90IGV2ZW50LmNob2ljZXNbMF0uZGVsdGEuY29udGVudDoKICAgICAgICAgICAgbG9nX2Z1bmMoImNvbXBsZXRpb25fdGV4dDp7fSB0aW1lX2Nvc3Q6e31zIi5mb3JtYXQoCiAgICAgICAgICAgICAgICBjb21wbGV0aW9uX3RleHQsIHRpbWUudGltZSgpLXN0YXJ0X3RpbWUpKQogICAgICAgICAgICB0b3RhbF90ZXh0ICs9IGNvbXBsZXRpb25fdGV4dAogICAgICAgICAgICBzZW5kbXNnKGNvbXBsZXRpb25fdGV4dCkKICAgICAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIGNvbXBsZXRpb25fdGV4dCA9ICIiCgogICAgaWYgdG90YWxfdGV4dDoKICAgICAgICBjb252ZXJzYXRpb25fbXNnX2RpY3Rbb3Blbl9pZF0uYXBwZW5kKHsicm9sZSI6ICJhc3Npc3RhbnQiLCAiY29udGVudCI6IHRvdGFsX3RleHR9KQogICAgICAgIGlmIGxlbihjb252ZXJzYXRpb25fbXNnX2RpY3Rbb3Blbl9pZF0pID4gNjoKICAgICAgICAgICAgY29udmVyc2F0aW9uX21zZ19kaWN0W29wZW5faWRdID0gY29udmVyc2F0aW9uX21zZ19kaWN0W29wZW5faWRdWy02Ol0KCiAgICByZXR1cm4gdG90YWxfdGV4dAojIGdldF9ncHQoZifop6Por7vkuIDkuItodHRwczovL3d3dy5lYXJuaW5nc3doaXNwZXJzLmNvbS9lYXJuaW5nc25ld3MnLGxvZ19mdW5jPXBhc3NlZCl8cHJpbnQKZ2V0X2dwdCgn5L2g5aW9LCDkvaDmmK/osIEnLGxvZ19mdW5jPXBhc3NlZCl8bG9n",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\nD"
					},
					"AwAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA3CwAAAAAAADgLAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1CwAAAAAAADULAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "eva."
					},
					"BAAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA6CwAAAAAAAAAAAAA6CwAAAAAAADsLAAAAAAAAAAAAADsLAAAAAAAAPAsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CwAAAAAAADgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "run",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "run"
					},
					"AQAAADwLAAAAAAAAPwsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8CwAAAAAAADwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD8LAAAAAAAAQQsAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CwAAAAAAAD8LAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/Users/spark/pycharmproject/secsay/dayou.py",
			"settings":
			{
				"buffer_size": 47412,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# Role: 微信公众号爆款文章大师\n\n## Goals\n- 吸引用户阅读后能够自发传播分享文章给他们的好友\n- 可以得到微信平台的算法推荐得到更多的阅读量曝光\n- 吸引读者长时间停留，高质量的阅读文章内容\n\n## Skills\n- 善于深度剖析给定的目标群体的特点以及在文章当中展现的案例类似的表述痛点。\n- 善于提炼分析文章主题的关键信息，用于展现到文章每一个段落中。\n- 擅长使用非常高水平的中文用词通过晦涩难懂、引人入胜的用词来描述目标内容和清晰的文章撰写逻辑能力。并且善用生动形象的修辞手法来表达文章的主题内容。\n- 善于一步步思考并推理，分析目标群体的特点，从他们的痛点需求出发，针对性角度提出文章的观点，引起特定目标群体的共鸣。\n- 具有具体化和个性化的语言能更直接地触动读者的情感，使他们感觉这个文章是为他们个人定制的。\n\n## Rules\n- 文章主题：{如何应对股市价格波动}\n- 目标群体用户：在股市上遇到各种涨跌问题的困扰，希望借助股神投资大师帮助他们分析股市上的各种波动现象\n- 每一个段落前后都添加对应的表情符号响应当前段落的内容\n- **你要控制文章字数在2000-3000字之间，但不要暴露你的字数**\n- 写作风格定位为文章作者角色以一位出色的心理咨询师的定位去书写相关对很多用户的心理层面的问题内容进行深入分析，而且必须使文章带有乐趣而不会枯燥，以故事的叙述形式来表达，整体以轻松幽默的风格，让读者在阅读过程中感受到愉悦和乐趣\n\n## OutputFormat\n1.引言：{文章以一个问题引入，让读者是否善于观察到相关问题的行为和特征，引发了读者的兴趣。}\n2.引用权威人士：{引用其他著名心理学家的观点为文章的论点提供可信度。}\n3.例子的使用：{使用成功人士的例子来支持主题的论点，增加了文章的说服力。}\n4.理论的解释：{文章在引用心理学理论时提供了简明扼要的解释，使读者能够理解这些理论与文章的主题之间的关系}\n5.阐述相关心理类型的人的特点：{文章总结这类型的人通常给人的印象}\n6.阐述心理学上与人性之间的关系：{讨论关系并且给予解释}\n7.结尾总结：{文章以一个总结性的段落结束，强调文章的核心观点，为读者留下深刻的印象}\n8.互动提问：{邀请用户就相关主题进行提问互动}",
			"settings":
			{
				"buffer_size": 962,
				"line_ending": "Unix",
				"name": "# Role: 微信公众号爆款文章大师"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA0gMAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "gushi"
					},
					"BgAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACJAQAAAAAAADkAAADmg4XmhJ/lpLHmjqflkozlhrLliqjnmoTooYzkuLrvvIzku6Xkv53mjIHmg4Xnu6rlubPooaHvvJ+JAQAAAAAAAIoBAAAAAAAAAAAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					5,
					"left_delete",
					null,
					"BQAAAIwBAAAAAAAAjAEAAAAAAAABAAAAaYsBAAAAAAAAiwEAAAAAAAABAAAAaIoBAAAAAAAAigEAAAAAAAABAAAAc4kBAAAAAAAAiQEAAAAAAAABAAAAdYgBAAAAAAAAiAEAAAAAAAABAAAAZw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAiQEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAigEAAAAAAAABAAAAZw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAjAEAAAAAAAACAAAAZ3U",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAjQEAAAAAAAAEAAAAZ3Uncw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAjgEAAAAAAAAFAAAAZ3Unc2g",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"",
					null,
					"AQAAAIgBAAAAAAAAiAEAAAAAAAAGAAAAZ3Unc2hp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "股市"
					},
					"AgAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACKAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAjAEAAAAAAAABAAAAYg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwEAAAAAAACLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAjgEAAAAAAAACAAAAYm8",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAigEAAAAAAAAEAAAAYm8nZA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "波动"
					},
					"AgAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAjAEAAAAAAAABAAAAag",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwEAAAAAAACLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAjQEAAAAAAAACAAAAamk",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAjwEAAAAAAAADAAAAamlh",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAkAEAAAAAAAAFAAAAamlhJ2c",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwEAAAAAAACPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"",
					null,
					"AQAAAIoBAAAAAAAAigEAAAAAAAAGAAAAamlhJ2dl",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "价格"
					},
					"AgAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAigEAAAAAAACKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "，"
					},
					"AQAAAI4BAAAAAAAAjwEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAI4BAAAAAAAAjgEAAAAAAAADAAAA77yM",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwEAAAAAAACPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAmwEAAAAAAAAGAAAA55Sf5rS7",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAnAEAAAAAAAABAAAAZw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAngEAAAAAAAACAAAAZ3U",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAnwEAAAAAAAAEAAAAZ3Uncw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngEAAAAAAACeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAoAEAAAAAAAAFAAAAZ3Unc2g",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnwEAAAAAAACfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"",
					null,
					"AQAAAJoBAAAAAAAAmgEAAAAAAAAGAAAAZ3Unc2hp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "股市"
					},
					"AgAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					2,
					"left_delete",
					null,
					"AgAAAKIBAAAAAAAAogEAAAAAAAADAAAA55CGoQEAAAAAAAChAQAAAAAAAAMAAADlv4M",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAogEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAowEAAAAAAAABAAAAeg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogEAAAAAAACiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAApAEAAAAAAAACAAAAemg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAApQEAAAAAAAADAAAAemhh",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAEAAAAAAACkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAApgEAAAAAAAAEAAAAemhhbg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAqAEAAAAAAAAFAAAAemhhbmc",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgEAAAAAAACmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAqQEAAAAAAAAHAAAAemhhbmcnZA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAEAAAAAAACoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAqgEAAAAAAAAIAAAAemhhbmcnZGk",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"",
					null,
					"AQAAAKEBAAAAAAAAoQEAAAAAAAAJAAAAemhhbmcnZGll",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgEAAAAAAACqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "涨跌"
					},
					"AgAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAArgEAAAAAAAAMAAAA5b+D55CG5ZKo6K+i",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAArwEAAAAAAAABAAAAZw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAAsQEAAAAAAAACAAAAZ3U",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwEAAAAAAACvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAAsgEAAAAAAAAEAAAAZ3Uncw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAAswEAAAAAAAAFAAAAZ3Unc2g",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgEAAAAAAACyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAAtAEAAAAAAAAGAAAAZ3Unc2hl",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"",
					null,
					"AQAAAK0BAAAAAAAArQEAAAAAAAAHAAAAZ3Unc2hlbg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAEAAAAAAAC0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "股神"
					},
					"AgAAAK0BAAAAAAAArgEAAAAAAAAAAAAArgEAAAAAAACvAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAAsAEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwEAAAAAAACvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAAsQEAAAAAAAABAAAAdA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAEAAAAAAACwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAAsgEAAAAAAAACAAAAdG8",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAAtAEAAAAAAAADAAAAdG91",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgEAAAAAAACyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAAtQEAAAAAAAAFAAAAdG91J3o",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAEAAAAAAAC0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"",
					null,
					"AQAAAK8BAAAAAAAArwEAAAAAAAAGAAAAdG91J3pp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "投资"
					},
					"AgAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwEAAAAAAACvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAsgEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAswEAAAAAAAABAAAAZA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgEAAAAAAACyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAtQEAAAAAAAACAAAAZGE",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAtgEAAAAAAAAEAAAAZGEncw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAtwEAAAAAAAAFAAAAZGEnc2g",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"",
					null,
					"AQAAALEBAAAAAAAAsQEAAAAAAAAGAAAAZGEnc2hp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtwEAAAAAAAC3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "大师"
					},
					"AgAAALEBAAAAAAAAsgEAAAAAAAAAAAAAsgEAAAAAAACzAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAALMBAAAAAAAAswEAAAAAAAAGAAAA6ICB5biI",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAugEAAAAAAAAGAAAA55Sf5rS7",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAuwEAAAAAAAABAAAAZw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugEAAAAAAAC6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAvQEAAAAAAAACAAAAZ3U",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAvgEAAAAAAAAEAAAAZ3Uncw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQEAAAAAAAC9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAvwEAAAAAAAAFAAAAZ3Unc2g",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgEAAAAAAAC+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"",
					null,
					"AQAAALkBAAAAAAAAuQEAAAAAAAAGAAAAZ3Unc2hp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "股市"
					},
					"AgAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"",
					null,
					"AQAAAL8BAAAAAAAAwAEAAAAAAAAVAAAA5b+D55CG6Zeu6aKY55qE55So5oi3",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwEAAAAAAADGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"",
					null,
					"AQAAAL8BAAAAAAAAwQEAAAAAAAABAAAAYg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAEAAAAAAADAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"",
					null,
					"AQAAAL8BAAAAAAAAwwEAAAAAAAACAAAAYm8",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQEAAAAAAADBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"",
					null,
					"AQAAAL8BAAAAAAAAvwEAAAAAAAAEAAAAYm8nZA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwEAAAAAAADDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "波动"
					},
					"AgAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAwgEAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQEAAAAAAADBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAwwEAAAAAAAABAAAAeA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgEAAAAAAADCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAxAEAAAAAAAACAAAAeGk",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwEAAAAAAADDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAxQEAAAAAAAADAAAAeGlh",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAxwEAAAAAAAAEAAAAeGlhbg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQEAAAAAAADFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"",
					null,
					"AQAAAMEBAAAAAAAAwQEAAAAAAAAGAAAAeGlhbid4",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwEAAAAAAADHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "现象"
					},
					"AgAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQEAAAAAAADBAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/Users/spark/pycharmproject/naja/news/xinhuashe.py",
			"settings":
			{
				"buffer_size": 5012,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMAPAAAAAAAAwg8AAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0w8AAAAAAADTDwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/Python 3/Python3.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python 3/Python3.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sspy3",
				"Set Syntax: Python3"
			],
			[
				"sspy",
				"Set Syntax: Python"
			],
			[
				"in",
				"Interrupt IPython Notebook Kernel"
			],
			[
				"pyth",
				"Set Syntax: Python3"
			],
			[
				"py",
				"Package Control: Add Repository"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/spark/pycharmproject/deva",
		"/Users/spark/pycharmproject/deva/deva",
		"/Users/spark/pycharmproject/deva/deva/utils"
	],
	"file_history":
	[
		"/Users/spark/tmp.txt",
		"/Users/spark/pycharmproject/naja/chatgpt_pywebio.py",
		"/Users/spark/pycharmproject/naja/pigprice.py",
		"/Users/spark/pycharmproject/deva/deva/endpoints.py",
		"/Users/spark/pycharmproject/secsay/j4096.py",
		"/Users/spark/.bashrc",
		"/Users/spark/自动操作/JupyterAutoStart.app/Contents/document.wflow",
		"/opt/homebrew/bin/jupyter-notebook",
		"/Users/spark/.jupyter/lab/user-settings/@jupyterlab/extensionmanager-extension/plugin.jupyterlab-settings",
		"/Users/spark/pycharmproject/deva/deva/utils/sqlitedict.py",
		"/Users/spark/.pip/pip.conf",
		"/Users/spark/pship/hello-python/main.py",
		"/Users/spark/.jupyter/jupyter_notebook_config.py",
		"/opt/homebrew/bin/jupyter",
		"/usr/local/bin/thefuck",
		"/opt/homebrew/bin/pip",
		"/Users/spark/pycharmproject/deva/deva/store.py",
		"/Users/spark/pycharmproject/secsay/zhouyi_api.py",
		"/Users/spark/pycharmproject/deva/.git/config",
		"/Users/spark/pycharmproject/deva/deva/compute.py",
		"/Users/spark/pycharmproject/deva/requirements.txt",
		"/Users/spark/pycharmproject/deva/deva/core.py",
		"/Users/spark/pycharmproject/deva/deva/topic.py",
		"/usr/local/lib/python3.10/site-packages/aioredis/__init__.py",
		"/Users/spark/pycharmproject/secsay/g64.py",
		"/Users/spark/pycharmproject/secsay/dayou.py",
		"/Users/spark/pycharmproject/deva/deva/pipe.py",
		"/Users/spark/pycharmproject/naja/twitter/trump.py",
		"/Users/spark/pycharmproject/naja/twitter/twitter.py",
		"/Users/spark/pycharmproject/deva/deva/__init__.py",
		"/Users/spark/pycharmproject/deva/deva/page.py",
		"/Users/spark/pship/down_m3u8/index-f1-v1-a1.m3u8",
		"/Users/spark/.vim/bundle/vim-gsc/plugin/gsc.vim",
		"/Users/spark/pycharmproject/deva/deva/when.py",
		"/Users/spark/.vimrc",
		"/Users/spark/pycharmproject/deva/deva/stream.py",
		"/Users/spark/pycharmproject/deva/.gitignore",
		"/Users/spark/pycharmproject/easyquant/.gitignore",
		"/private/etc/hosts",
		"/Users/spark/pycharmproject/easyquant/stock_2468/model.py",
		"/Users/spark/pship/snipte_test.py",
		"/Users/spark/pycharmproject/easyquant/stream_web_server.py",
		"/Users/spark/pycharmproject/easyquant/stock_2468/main.py",
		"/Users/spark/pycharmproject/deva/deva/streamz/core.py",
		"/Users/spark/pycharmproject/deva/deva/streamz/sources.py",
		"/usr/local/lib/python3.7/site-packages/tornado/process.py",
		"/Users/spark/Downloads/streamz-0.5.1/MANIFEST.in",
		"/Users/spark/Downloads/streamz-0.5.1/setup.cfg",
		"/Users/spark/pycharmproject/deva/setup.py",
		"/Users/spark/Downloads/streamz-0.5.1/requirements.txt",
		"/Users/spark/pycharmproject/deva/deva/search.py",
		"/Users/spark/pship/tmp.txt"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"dis",
			"tables",
			"异常",
			"bug",
			"resa",
			"resample",
			"sample",
			"ME",
			"me",
			"sink",
			"nbextensions",
			"nbex",
			"Thread",
			"cache",
			"_rule_re",
			"is_werkzeug_route",
			"_rule_re",
			"timer",
			"islice",
			"head",
			"detail",
			"SyntasticStatuslineFlag",
			"tagbar",
			"核桃",
			"大畜",
			"pay",
			"九四"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/spark/pycharmproject/deva"
		},
		{
			"path": "/Users/spark/pycharmproject/secsay"
		},
		{
			"path": "/Users/spark/pycharmproject/naja"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "deva/when.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7659,
						"regions":
						{
						},
						"selection":
						[
							[
								2897,
								2897
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "deva/core.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37005,
						"regions":
						{
						},
						"selection":
						[
							[
								24294,
								24294
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/usr/local/bin/xattr",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 209,
						"regions":
						{
						},
						"selection":
						[
							[
								209,
								209
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "deva/utils/sqlitedict.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21658,
						"regions":
						{
						},
						"selection":
						[
							[
								11059,
								11065
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "deva/store.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5896,
						"regions":
						{
						},
						"selection":
						[
							[
								2907,
								2907
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/spark/pycharmproject/naja/test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2882,
						"regions":
						{
						},
						"selection":
						[
							[
								2881,
								2881
							]
						],
						"settings":
						{
							"auto_name": "# chatgpt",
							"autopep8_view_autosave": true,
							"is_init_dirty_state": true,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/spark/pycharmproject/secsay/dayou.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47412,
						"regions":
						{
						},
						"selection":
						[
							[
								679,
								679
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 962,
						"regions":
						{
						},
						"selection":
						[
							[
								760,
								760
							]
						],
						"settings":
						{
							"auto_name": "# Role: 微信公众号爆款文章大师",
							"default_dir": "/Users/spark/pycharmproject/naja",
							"is_init_dirty_state": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/spark/pycharmproject/naja/news/xinhuashe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5012,
						"regions":
						{
						},
						"selection":
						[
							[
								4283,
								4283
							]
						],
						"settings":
						{
							"autopep8_view_autosave": true,
							"is_init_dirty_state": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 108.0
	},
	"output.autopep8":
	{
		"height": 108.0
	},
	"output.exec":
	{
		"height": 108.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"core",
				"deva/deva/core.py"
			],
			[
				"xinhuashe",
				"naja/news/xinhuashe.py"
			],
			[
				"pig",
				"naja/pigprice.py"
			],
			[
				"chat",
				"naja/chatgpt_pywebio.py"
			],
			[
				"dayou",
				"secsay/dayou.py"
			],
			[
				"stre",
				"deva/stream.py"
			],
			[
				"str",
				"deva/stream.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/pycharmproject/deva/deva.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
